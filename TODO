Stabilise enough to write tests

Consider adding a formalized description of args/types; use these to construct
the derive-args regexp; save only the validate args as the "rule", and
automate stringification.

Consider: require Expr to specify a dict up front, require vars and funcs
to resolve as we go, introduce global_ok to allow new globals, rewrite
condstart to use that to remove the need for late resolving. That may all
mean big changes to how we construct exprs dynamically.

Remove explicit rules entirely, discover them.
Discover rules even when we take multiple steps.

Sets, type checking, inequalities, constraints.
- \Aa \e \Z, a > 10: ...

Abstract out knowledge of operators:
- arg number and types, return type
- rules
- constructing the grammar will be hard

